# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
from collections import Counter

class NodeTree(object):
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

    def children(self):
        return self.left, self.right

    def __str__(self):
        return self.left, self.right

def huffman_code_tree(node, binString=''):
    '''
    Function to find Huffman Code
    '''
    if type(node) is str:
        return {node: binString}
    (l, r) = node.children()
    d = dict()
    d.update(huffman_code_tree(l, binString + '0'))
    d.update(huffman_code_tree(r, binString + '1'))
    return d


def make_tree(nodes):
    '''
    Function to make tree
    :param nodes: Nodes
    :return: Root of the tree
    '''
    while len(nodes) > 1:
        (key1, c1) = nodes[-1]
        (key2, c2) = nodes[-2]
        nodes = nodes[:-2]
        node = NodeTree(key1, key2)
        nodes.append((node, c1 + c2))
        nodes = sorted(nodes, key=lambda x: x[1], reverse=True)
    return nodes[0][0]


def encode(string, node):
    print("Encoded Text:")
    stringBuild = ""
    for x in string:
        stringBuild += node[x]
    return stringBuild
    
def decode(string, node):
    print("Decoded Text:")
    
    stringBuild = ""
    encodedString = ""
    codeList = list(node.values())
    textList = list(node.keys())
    
    for x in string:
        encodedString += x
        if(encodedString in codeList):
            pos = codeList.index(encodedString)
            newText = textList[pos]
            stringBuild += newText
            encodedString = ""
    
    return stringBuild

def main():
    string = input("Enter a string:")
    frequency = dict(Counter(string))
    frequency = sorted(frequency.items(), key=lambda x: x[1], reverse=True)
    node = make_tree(frequency)
    encoding = huffman_code_tree(node)
    print("Preprocessed Table:")
    for i in encoding:
        print(f'{i} : {encoding[i]}')
    print("\n")
    encodedText = encode(string, encoding)
    print(encodedText)
    print("\n")
    print(decode(encodedText, encoding))
    
    
    
    

if __name__ == "__main__":
    main()
